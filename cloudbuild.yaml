steps:
  # Install LangGraph CLI and generate Dockerfile in the same step
  - name: 'python:3.12'
    entrypoint: 'sh'
    args: ['-c', 'pip install langgraph-cli && langgraph dockerfile -c langgraph.json Dockerfile']

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'echo "Secret One: $$DATABASE_URI" && echo "SeREDIS_URIcret Two: $$REDIS_URI" && echo "LANGSMITH_API_KEY Two: $$LANGSMITH_API_KEY"']
    secretEnv: ['LANGSMITH_API_KEY', 'OPENAI_API_KEY', 'DATABASE_URI', 'REDIS_URI']

  # Build Docker image with tag (-t) and specified platform
  # Created with documentation: https://cloud.google.com/build/docs/building/build-containers
  - name: 'gcr.io/cloud-builders/docker'
    args: [ 'build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/langgraph-repo/land-shark-demo-app:latest', '.' ]

  # Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/langgraph-repo/land-shark-demo-app:latest']

  # Deploy Docker image to Cloud Run with VPC Connector, using the image from Artifact Registry. 
  # Created with documentation: https://cloud.google.com/run/docs/deploying
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: "bash"
    args: 
      - "-c"
      - |
        gcloud run deploy land-shark-demo-app --image us-central1-docker.pkg.dev/$PROJECT_ID/langgraph-repo/land-shark-demo-app:latest \
        --region us-central1 \
        --platform managed \
        --port 8000 \
        --set-env-vars SUPABASE_URL=$$SUPABASE_URL \
        --set-env-vars SUPABASE_KEY=$$SUPABASE_KEY \
        --set-env-vars LANGSMITH_API_KEY=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 \
        --set-env-vars OPENAI_API_KEY=$$OPENAI_API_KEY \
        --set-env-vars REDIS_URI=$$REDIS_URI \
        --set-env-vars DATABASE_URI=postgresql://postgres:ddd.123.@10.35.48.5:5432/postgres \
        --allow-unauthenticated \
        --timeout 1800s \
        --memory 2Gi \
        --cpu 2 \
        --vpc-connector land-shark-vpc-con
    secretEnv: ['LANGSMITH_API_KEY', 'OPENAI_API_KEY', 'DATABASE_URI', 'REDIS_URI', 'SUPABASE_URL', 'SUPABASE_KEY']
substitutions:
  _PROJECT_ID: $PROJECT_ID
options:
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/LANGSMITH_API_KEY/versions/2
    env: LANGSMITH_API_KEY
  - versionName: projects/$PROJECT_ID/secrets/OPENAI_API_KEY/versions/1
    env: OPENAI_API_KEY
  - versionName: projects/$PROJECT_ID/secrets/DATABASE_URI/versions/3
    env: DATABASE_URI
  - versionName: projects/$PROJECT_ID/secrets/REDIS_URI/versions/1
    env: REDIS_URI
  - versionName: projects/$PROJECT_ID/secrets/SUPABASE_URL/versions/1
    env: 'SUPABASE_URL'
  - versionName: projects/$PROJECT_ID/secrets/SUPABASE_KEY/versions/1
    env: 'SUPABASE_KEY'